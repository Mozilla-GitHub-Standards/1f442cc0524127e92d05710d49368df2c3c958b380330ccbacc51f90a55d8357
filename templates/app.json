{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "MIG application",
    "Parameters": {
        "Environment": {
            "AllowedValues": [
                "dev",
                "stage",
                "prod"
            ],
            "Default": "dev",
            "Description": "Environment",
            "Type": "String"
        },
        "ImageId": {
            "Description": "AMI",
            "Type": "String"
        },
        "ApiInstanceType": {
            "Default": "t2.micro",
            "Description": "Instance type",
            "Type": "String"
        },
        "RelayInstanceType": {
            "Default": "t2.micro",
            "Description": "Instance type",
            "Type": "String"
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "BaseStack": {
            "Description": "Name of base stack",
            "Type": "String"
        },
        "RoleStack": {
            "Description": "Name of role stack",
            "Type": "String"
        },
        "RDSStack": {
            "Description": "Name of rds stack",
            "Type": "String"
        },
        "APICertName": {
            "Type": "String",
            "Description": "Name of certificate to use for API"
        },
        "DeployRepo": {
            "Type": "String",
            "Description": "URL for MIG deploy repo"
        },
        "SopsS3URL": {
            "Type": "String",
            "Description": "S3 URL for sops data"
        }
    },
    "Resources": {
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [ { "Fn::ImportValue": { "Fn::Sub": "${RoleStack}-MIGInstanceRole" }} ]
            }
        },
        "LaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": { "Ref": "ImageId" },
                "InstanceType": { "Ref": "ApiInstanceType" },
                "KeyName": { "Ref": "KeyName" },
                "IamInstanceProfile": { "Ref": "InstanceProfile" },
                "SecurityGroups": [ { "Ref": "APISecurityGroup" } ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/sh\n",
                                "echo api >> /etc/myrole\n",
                                "apt-get update && apt-get -y install git ansible golang-go awscli\n",
                                "export GOPATH=/root/go; mkdir $GOPATH\n",
                                "go get -u go.mozilla.org/sops/cmd/sops\n",
                                "cd /root && git clone ",
                                { "Ref": "DeployRepo" },
                                "\n",
                                "cd /root/mig-deploy/playbooks\n",
                                "aws s3 cp ",
                                { "Ref": "SopsS3URL" },
                                "/mig/mig-sec-",
                                { "Ref": "Environment" },
                                ".yml vars/sec.yml\n",
                                "echo '---' > vars/cfoutput.yml\n",
                                "echo 'dbhost: ",
                                { "Fn::ImportValue": { "Fn::Sub": "${RDSStack}-DBInstanceAddress" }},
                                "' >> vars/cfoutput.yml\n",
                                "/root/go/bin/sops -d -i vars/sec.yml\n",
                                "ansible-playbook -t api entry.yml\n"
                            ]
                        ]
                    }
                }
            }
        },
        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LaunchConfigurationName": { "Ref": "LaunchConfiguration" },
                "MinSize": "2",
                "MaxSize": "2",
                "HealthCheckGracePeriod": "500",
                "LoadBalancerNames": [ { "Ref": "APIELB" } ],
                "VPCZoneIdentifier": [
                    { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-PrivateSubnet1" }},
                    { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-PrivateSubnet2" }}
                ],
                "Tags": [
                    { "Key": "Name", "Value": "mig api", "PropagateAtLaunch": "true" }
                ]
            }
        },
        "APIELB": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Tags": [
                    { "Key": "Name", "Value": "mig api loader balancer" }
                ],
                "Policies": [
                    {
                        "PolicyName": "APIELBSecurityPolicy",
                        "PolicyType": "SSLNegotiationPolicyType",
                        "Attributes": [ {
                            "Name": "Reference-Security-Policy",
                            "Value": "ELBSecurityPolicy-2015-03"
                        } ]
                    }
                ],
                "Subnets": [
                    { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-PublicSubnet1" }},
                    { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-PublicSubnet2" }}
                ],
                "SecurityGroups": [ { "Ref": "APIELBSecurityGroup" } ],
                "Listeners": [ {
                    "InstancePort": "1664",
                    "InstanceProtocol": "HTTP",
                    "LoadBalancerPort": "443",
                    "Protocol": "HTTPS",
                    "PolicyNames": [ "APIELBSecurityPolicy" ],
                    "SSLCertificateId": {
                        "Fn::Join": [ "",
                            [
                                "arn:aws:iam::",
                                { "Ref": "AWS::AccountId" },
                                ":server-certificate/",
                                { "Ref": "APICertName" }
                            ]
                        ]
                    }
                } ]
            }
        },
        "Relay1": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "Relay2",
            "Properties": {
                "ImageId": { "Ref": "ImageId" },
                "InstanceType": { "Ref": "RelayInstanceType" },
                "IamInstanceProfile": { "Ref": "InstanceProfile" },
                "KeyName": { "Ref": "KeyName" },
                "SecurityGroupIds": [ { "Ref": "Relay1SecurityGroup" } ],
                "SubnetId": { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-PrivateSubnet1" }},
                "Tags": [
                    { "Key": "Name", "Value": "mig relay 1" }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/sh\n",
                                "echo relay1 >> /etc/myrole\n",
                                "apt-get update && apt-get -y install git ansible golang-go awscli\n",
                                "export GOPATH=/root/go; mkdir $GOPATH\n",
                                "go get -u go.mozilla.org/sops/cmd/sops\n",
                                "cd /root && git clone ",
                                { "Ref": "DeployRepo" },
                                "\n",
                                "cd /root/mig-deploy/playbooks\n",
                                "aws s3 cp ",
                                { "Ref": "SopsS3URL" },
                                "/mig/mig-sec-",
                                { "Ref": "Environment" },
                                ".yml vars/sec.yml\n",
                                "echo '---' > vars/cfoutput.yml\n",
                                "echo 'secondaryrelay: ",
                                { "Fn::GetAtt": [ "Relay2", "PrivateDnsName" ] },
                                "' >> vars/cfoutput.yml\n",
                                "/root/go/bin/sops -d -i vars/sec.yml\n",
                                "ansible-playbook -t relay1 entry.yml\n"
                            ]
                        ]
                    }
                }
            }
        },
        "Relay2": {
            "Type": "AWS::EC2::Instance",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M",
                    "Count": 1
                }
            },
            "Properties": {
                "ImageId": { "Ref": "ImageId" },
                "InstanceType": { "Ref": "RelayInstanceType" },
                "IamInstanceProfile": { "Ref": "InstanceProfile" },
                "KeyName": { "Ref": "KeyName" },
                "SecurityGroupIds": [ { "Ref": "Relay2SecurityGroup" } ],
                "SubnetId": { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-PrivateSubnet2" }},
                "Tags": [
                    { "Key": "Name", "Value": "mig relay 2" }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/sh\n",
                                "echo relay2 >> /etc/myrole\n",
                                "apt-get update && apt-get -y install git ansible golang-go awscli python-pip\n",
                                "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                "export GOPATH=/root/go; mkdir $GOPATH\n",
                                "go get -u go.mozilla.org/sops/cmd/sops\n",
                                "cd /root && git clone ",
                                { "Ref": "DeployRepo" },
                                "\n",
                                "cd /root/mig-deploy/playbooks\n",
                                "aws s3 cp ",
                                { "Ref": "SopsS3URL" },
                                "/mig/mig-sec-",
                                { "Ref": "Environment" },
                                ".yml vars/sec.yml\n",
                                "echo '---' > vars/cfoutput.yml\n",
                                "/root/go/bin/sops -d -i vars/sec.yml\n",
                                "ansible-playbook -t relay2 entry.yml\n",
                                "cfn-signal -e 0 --stack '",
                                { "Ref": "AWS::StackName" },
                                "' --resource 'Relay2' --region '",
                                { "Ref": "AWS::Region" },
                                "'\n"
                            ]
                        ]
                    }
                }
            }
        },
        "RelayELB": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Tags": [
                    { "Key": "Name", "Value": "mig relay load balancer" }
                ],
                "Subnets": [
                    { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-PublicSubnet1" }},
                    { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-PublicSubnet2" }}
                ],
                "SecurityGroups": [ { "Ref": "RelayELBSecurityGroup" } ],
                "Listeners": [ {
                    "InstancePort": "5671",
                    "InstanceProtocol": "TCP",
                    "LoadBalancerPort": "443",
                    "Protocol": "TCP",
                } ],
                "Instances": [
                    { "Ref": "Relay1" },
                    { "Ref": "Relay2" }
                ]
            }
        },
        "APISecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for api instances",
                "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-VPCId" }},
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "SourceSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-BastionSecurityGroupId" }}},
                    { "IpProtocol": "tcp", "FromPort": "1664", "ToPort": "1664", "SourceSecurityGroupId": { "Ref": "APIELBSecurityGroup" }},
                ],
                "Tags": [
                    { "Key": "Name", "Value": "mig api security group" }
                ]
            }
        },
        "APIELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "API ELB access",
                "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-VPCId" }},
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0" }
                ],
                "Tags": [
                    { "Key": "Name", "Value": "mig api elb security group" }
                ]
            }
        },
        "Relay1SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for relay instances",
                "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-VPCId" }},
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "SourceSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-BastionSecurityGroupId" }}},
                    { "IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "SourceSecurityGroupId": { "Ref": "Relay2SecurityGroup" }},
                    { "IpProtocol": "tcp", "FromPort": "5671", "ToPort": "5671", "SourceSecurityGroupId": { "Ref": "RelayELBSecurityGroup" }}
                ],
                "Tags": [
                    { "Key": "Name", "Value": "mig relay security group" }
                ]
            }
        },
        "Relay2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for relay instances",
                "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-VPCId" }},
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "SourceSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-BastionSecurityGroupId" }}},
                    { "IpProtocol": "tcp", "FromPort": "5671", "ToPort": "5671", "SourceSecurityGroupId": { "Ref": "RelayELBSecurityGroup" }}
                ],
                "Tags": [
                    { "Key": "Name", "Value": "mig relay security group" }
                ]
            }
        },
        "Relay2RelayIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "DependsOn": "Relay2SecurityGroup",
            "Properties": {
                "GroupId": { "Ref": "Relay2SecurityGroup" },
                "IpProtocol": "tcp",
                "FromPort": "0",
                "ToPort": "65535",
                "SourceSecurityGroupId": { "Ref": "Relay1SecurityGroup" }
            }
        },
        "RelayELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Relay ELB access",
                "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${BaseStack}-VPCId" }},
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0" }
                ],
                "Tags": [
                    { "Key": "Name", "Value": "mig relay elb security group" }
                ]
            }
        }
    }
}
