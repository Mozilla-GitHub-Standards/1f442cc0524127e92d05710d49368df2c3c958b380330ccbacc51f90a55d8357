{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "MIG base infrastructure",
    "Parameters": {
        "Environment": {
            "AllowedValues": [
                "dev",
                "stage",
                "prod"
            ],
            "Default": "dev",
            "Description": "Environment",
            "Type": "String"
        },
        "ImageId": {
            "Description": "AMI",
            "Type": "String"
        },
        "InstanceType": {
            "Default": "t2.micro",
            "Description": "Instance type",
            "Type": "String"
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "DeployRepo": {
            "Type": "String",
            "Description": "URL for MIG deploy repo"
        },
        "RoleStack": {
            "Type": "String",
            "Description": "Name of role stack"
        },
        "SopsS3URL": {
            "Type": "String",
            "Description": "S3 URL for sops data"
        }
    },
    "Conditions": {
        "IsProd": { "Fn::Equals": [ { "Ref": "Environment"}, "prod" ] }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.20.0.0/16",
                "EnableDnsHostnames": "true",
                "Tags": [
                    { "Key": "Name", "Value": "mig vpc" }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    { "Key": "Name", "Value": "mig internet gateway" }
                ]
            }
        },
        "GatewayAssoc": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "InternetGatewayId": { "Ref": "InternetGateway" }
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "CidrBlock": "10.20.0.0/24",
                "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": "" }] },
                "Tags": [
                    { "Key": "Name", "Value": "mig public subnet 1" }
                ]
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "CidrBlock": "10.20.1.0/24",
                "AvailabilityZone": { "Fn::Select": ["1", { "Fn::GetAZs": "" }] },
                "Tags": [
                    { "Key": "Name", "Value": "mig public subnet 2" }
                ]
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    { "Key": "Name", "Value": "mig public route table" }
                ]
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayAssoc",
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": { "Ref": "InternetGateway" }
            }
        },
        "PublicRouteTableAssoc1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnet1" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },
        "PublicRouteTableAssoc2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnet2" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "CidrBlock": "10.20.2.0/24",
                "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": "" }] },
                "MapPublicIpOnLaunch": "false",
                "Tags": [
                    { "Key": "Name", "Value": "mig private subnet 1" }
                ]
            }
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "CidrBlock": "10.20.3.0/24",
                "AvailabilityZone": { "Fn::Select": ["1", { "Fn::GetAZs": "" }] },
                "MapPublicIpOnLaunch": "false",
                "Tags": [
                    { "Key": "Name", "Value": "mig private subnet 2" }
                ]
            }
        },
        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    { "Key": "Name", "Value": "mig private route table" }
                ]
            }
        },
        "PrivateRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayAssoc",
            "Properties": {
                "RouteTableId": { "Ref": "PrivateRouteTable" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": { "Ref": "BastionInstance" }
            }
        },
        "PrivateRouteTableAssoc1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PrivateSubnet1" },
                "RouteTableId": { "Ref": "PrivateRouteTable" }
            }
        },
        "PrivateRouteTableAssoc2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PrivateSubnet2" },
                "RouteTableId": { "Ref": "PrivateRouteTable" }
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [ { "Fn::ImportValue": { "Fn::Sub": "${RoleStack}-MIGInstanceRole" }} ]
            }
        },
        "BastionEIP": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "GatewayAssoc",
            "Properties": {
                "InstanceId": { "Ref": "BastionInstance" },
                "Domain": "vpc"
            }
        },
        "BastionInstance": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "GatewayAssoc",
            "Properties": {
                "ImageId": { "Ref": "ImageId" },
                "InstanceType": { "Ref": "InstanceType" },
                "IamInstanceProfile": { "Ref": "InstanceProfile" },
                "KeyName": { "Ref": "KeyName" },
                "SourceDestCheck": "false",
                "NetworkInterfaces": [{
                    "GroupSet": [{"Ref": "BastionSecurityGroup"}],
                    "AssociatePublicIpAddress": "true",
                    "DeviceIndex": "0",
                    "DeleteOnTermination": "true",
                    "SubnetId": { "Ref": "PublicSubnet1" }
                }],
                "Tags": [
                    { "Key": "Name", "Value": "mig bastion host" }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/sh\n",
                                "echo gw >> /etc/myrole\n",
                                "apt-get update && apt-get -y install git ansible golang-go awscli\n",
                                "export GOPATH=/root/go; mkdir $GOPATH\n",
                                "go get -u go.mozilla.org/sops/cmd/sops\n",
                                "cd /root && git clone ",
                                { "Ref": "DeployRepo" },
                                "\n",
                                "cd /root/mig-deploy/playbooks\n",
                                "aws s3 cp ",
                                { "Ref": "SopsS3URL" },
                                "/mig/mig-sec-",
                                { "Ref": "Environment" },
                                ".yml vars/sec.yml\n",
                                "/root/go/bin/sops -d -i vars/sec.yml\n",
                                "ansible-playbook -t users,gw,td-agent entry.yml\n"
                            ]
                        ]
                    }
                }
            }
        },
        "BastionSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for MIG bastion host",
                "VpcId": { "Ref": "VPC" },
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" },
                    { "IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "CidrIp": "10.20.0.0/16" }
                ],
                "Tags": [
                    { "Key": "Name", "Value": "mig bastion security group" }
                ]
            }
        }
    },
    "Outputs": {
        "VPCId": {
            "Description": "VPC ID",
            "Value": { "Ref": "VPC" },
            "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-VPCId" }}
        },
        "PrivateSubnet1": {
            "Description": "Private subnet 1 ID",
            "Value": { "Ref": "PrivateSubnet1" },
            "Export": { "Name": {"Fn::Sub": "${AWS::StackName}-PrivateSubnet1" }}
        },
        "PrivateSubnet2": {
            "Description": "Private subnet 2 ID",
            "Value": { "Ref": "PrivateSubnet2" },
            "Export": { "Name": {"Fn::Sub": "${AWS::StackName}-PrivateSubnet2" }}
        },
        "PublicSubnet1": {
            "Description": "Public subnet 1 ID",
            "Value": { "Ref": "PublicSubnet1" },
            "Export": { "Name": {"Fn::Sub": "${AWS::StackName}-PublicSubnet1" }}
        },
        "PublicSubnet2": {
            "Description": "Public subnet 2 ID",
            "Value": { "Ref": "PublicSubnet2" },
            "Export": { "Name": {"Fn::Sub": "${AWS::StackName}-PublicSubnet2" }}
        },
        "BastionInstanceId": {
            "Description": "Bastion host instance ID",
            "Value": { "Ref": "BastionInstance" },
            "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-BastionInstanceId" }}
        },
        "BastionSecurityGroupId": {
            "Description": "Bastion security group ID",
            "Value": { "Ref": "BastionSecurityGroup" },
            "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-BastionSecurityGroupId" }}
        },
        "BastionIP": {
            "Description": "Bastion public IP",
            "Value": { "Fn::GetAtt": [ "BastionInstance", "PublicIp" ] },
            "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-BastionIP" }}
        }
    }
}
